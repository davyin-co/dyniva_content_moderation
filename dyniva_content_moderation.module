<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\dyniva_content_moderation\Form\NodeModerateForm;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\dyniva_content_moderation\DynivaEntityOperations;

/**
 * @file
 * Contains dyniva_content_moderation module.
 */

/**
 * Implements hook_entity_presave().
 */
function dyniva_content_moderation_node_presave(EntityInterface $entity) {
  if($entity->original_moderation_state == 'draft' && $entity->original && !$entity->original->status->value && $entity->status->value) {
    if($entity->hasField('published_time')) {
      $dateFormatter = \Drupal::service('date.formatter');
      $entity->published_time->value = $dateFormatter->format(time()-date('Z'), 'custom', 'Y-m-d\TH:i:s');
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function dyniva_content_moderation_entity_presave(EntityInterface $entity) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(DynivaEntityOperations::class)
    ->entityPresave($entity);
}

/**
 * Implements hook_ENTITY_TYPE_storage_load().
 */
function dyniva_content_moderation_node_storage_load(array $entities) {
  $dateFormatter = \Drupal::service('date.formatter');
  foreach ($entities as $entity) {
    if($entity->hasField('published_time') && $entity->status->value && !$entity->published_time->value && $entity->getCreatedTime()) {
      $entity->published_time->value = $dateFormatter->format($entity->getCreatedTime()-date('Z'), 'custom', 'Y-m-d\TH:i:s');
    }
  }
}

/**
 * Implements hook_mail().
 */
function dyniva_content_moderation_mail($key, &$message, $params) {
  switch ($key) {
    case 'moderate':
      $message['headers']['Content-Type'] = SWIFTMAILER_FORMAT_HTML;
      $config = \Drupal::config('system.site');
      $message['subject'] .= t('@title need your approve', ['@title' => $params['node']->label()]) . ' | ' . $config->get('name');

      $timestamp = time();
      $url_params = [
        'node_revision' => $params['node']->vid->value,
        'uid' => $params['approver']->id(),
        'timestamp' => $timestamp,
        'hash' => user_pass_rehash($params['approver'], $timestamp)
      ];
      $preview = Link::createFromRoute(t('Preview'), 'ccms.entity.node.moderation.preview', $url_params, ['absulote' => true,'query' => ['workspace_id' => $params['workspace_id']]]);
      $html = [
        '#theme' => 'ccms_mail',
        '#content' => [
          '#theme' => 'node_moderate_email',
          '#node' => $params['node'],
          '#user' => $params['approver'],
          '#langcode' => $message['langcode'],
          '#workspace_id' => $params['workspace_id'],
        ],
        '#title' => $params['node']->label(),
        '#link' => $preview->toString(),
      ];

      $message['body']['content'] = \Drupal::service('renderer')->render($html);
      break;
  }
}

/**
 * Implements hook_toolbar().
 */
function dyniva_content_moderation_toolbar() {

  return \Drupal::service('dyniva_content_moderation.toolbar')->toolbar();
}

/**
 * Implements hook_theme().
 */
function dyniva_content_moderation_theme() {
  return [
    'node_moderate_form' => [
      'render element' => 'form',
    ],
    'entity_moderate_form' => [
      'render element' => 'form',
    ],
    'node_moderate_changes' => [
      'template' => 'node-moderate-changes',
      'path' => drupal_get_path('module', 'dyniva_content_moderation') . '/templates',
      'variables' => ['title' => '','items' => array()],
    ],
    'node_moderate_email' => [
      'variables' => ['node' => NULL,'user' => NULL,'langcode' => NULL,'workspace_id' => NULL],
      'function' => 'theme_node_moderate_email',
    ],
  ];
}

/**
 * Implements hook_node_access().
 *
 * Nodes in particular should be viewable if unpublished and the user has
 * the appropriate permission. This permission is therefore effectively
 * mandatory for any user that wants to moderate things.
 */
function dyniva_content_moderation_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');

  $access_result = AccessResult::neutral();
  if(\Drupal::routeMatch()->getRouteName() == 'entity.node.preview'){
    return $access_result;
  }
  if ($operation === 'update' && $moderation_info->isModeratedEntity($node) && !empty($node->moderation_state->value)) {

    $access_result = $node->moderation_state->value == 'draft' ? AccessResult::neutral() : AccessResult::forbidden();

    $access_result->addCacheableDependency($node);
    $access_result->addCacheableDependency($account);
  }

  return $access_result;
}

/**
 *
 * @param unknown $from
 * @param unknown $to
 * @return NULL
 */
function dyniva_content_moderation_get_transition_from_states($entity,$from, $to) {
  /**
   *
   * @var WorkflowInterface $workflow
   */
  $workflow = \Drupal::service('content_moderation.moderation_information')->getWorkflowForEntity($entity);
  $state = $workflow->getTypePlugin()->getState($from);
  return $state->getTransitionTo($to);
}

/**
 * Helper.
 */
function theme_node_moderate_email($variables){
  // approvers
  $node = $variables['node'];
  $user = $variables['user'];
  $langcode = $variables['langcode'];
  $workspace_id = !empty($variables['workspace_id'])?$variables['workspace_id']:\Drupal::service('workspace.manager')->getActiveWorkspace()->id();
  $language = \Drupal::languageManager()->getLanguage($langcode);

  /**
   *
   * @var WorkflowInterface $workflow
   */
  $workflow = \Drupal::service('content_moderation.moderation_information')->getWorkflowForEntity($node);

  $renderer = \Drupal::service('renderer');
  $output = [];

  $moderations = dyniva_content_moderation_get_entitiy_approval($node);
  $items = [];
  foreach ($node->approvers as $approver) {
    $item['#markup'] = $approver->entity->label() . ' ';
    if (isset($moderations[$approver->entity->id()])) {
      $approval = $moderations[$approver->entity->id()];
      if (!empty($approval)) {
        $approvers_markup = '<td width="20"><b>閳?/b></td><td>' . $approver->entity->user_fullname->value . ': approved.</td>';
      }
      else {
        $comment = $approval->comment->value ? $approval->comment->value : 'no comments';
        $approvers_markup = '<td width="20"><b>鑴?/b></td><td>' . $approver->entity->user_fullname->value . ': rejected, ' . $comment . '.</td>';
      }
    }
    else {
      $approvers_markup = '<td width="20"><b>?</b></td><td>' . $approver->entity->user_fullname->value . ' pending approval.</td>';
    }
    $items[] = $approvers_markup;
  }
  $output['approvers'] = [
    '#theme' => 'ccms_mail_item_list',
    '#title' => 'Approvers:',
    '#items' => $items,
  ];

  // changes
  $node_storage = \Drupal::entityManager()->getStorage('node');
  $revision_ids = array_reverse($node_storage->revisionIds($node));
  $change_items = [];
  $cur_vid = $last_vid = reset($revision_ids);
  $change_count = 0;
  foreach ($revision_ids as $index => $revision_id) {
    $revision = $node_storage->loadRevision($revision_id);
    $log_rows = [$revision->revision_log->value?t($revision->revision_log->value):t('')];
    $state = $workflow->getTypePlugin()->getState($revision->moderation_state->value);
    if ($state->isPublishedState())
      break;
    if (isset($revision_ids[$index + 1])) {
      $last_vid = $revision_ids[$index + 1];
      $prevision = $node_storage->loadRevision($revision_ids[$index + 1]);
      $log_rows = NodeModerateForm::getRevisionChanges($revision, $prevision);
    }
    $row = [
      'vid' => $revision->getRevisionId(),
      'date' => $revision->getChangedTime(),
      'user' => $revision->getRevisionUser()->user_fullname->value,
      'comments' => $log_rows,
      'state' => $state->label(),
    ];
    $change_items[$revision->getChangedTime()] = $row;
    $change_count++;
    if($change_count >= 5){
      break;
    }
  }

  $dateformatter = \Drupal::service('date.formatter');

  krsort($change_items);
  $items = array();
  foreach ($change_items as $timestamp => $row){
    $day = $dateformatter->format($timestamp, 'custom','F j, Y');
    $row['date'] = $dateformatter->formatInterval(time() - $row['date']) . ' ago';
    $items[$day][] = $row;
  }
  $changs = [];
  foreach ($items as $day => $subs){
    foreach ($subs as $index => $c){
      $logs = [];
      foreach ($c['comments'] as $log){
        if(is_object($log)) {
          $logs[] = $log->render();
        }else{
          $logs[] = $log;
        }
      }
      $logs = $logs ? $logs : ['No update logs.'];
      $changs[] = '<td>' . $c['user'] . '</td><td align="right">' .($index==0?$day:'&nbsp;') . '</td>';
      $changs[] = '<td><font size="2" color="#333333">' . implode('<br/>',$logs) . '</font></td><td>&nbsp;</td>';
      // $changs[] = '<td height="10"></td><td>&nbsp;</td>';
    }
  }
  $output['changes'] = [
    '#theme' => 'ccms_mail_item_list',
    '#title' => 'Changes:',
    '#items' => $changs,
  ];
  $timestamp = time();
  $url_params = [
    'node_revision' => $node->vid->value,
    'uid' => $user->id(),
    'timestamp' => $timestamp,
    'hash' => user_pass_rehash($user, $timestamp)
  ];

  $managedEntity = dyniva_core_get_entity_managed_entity($node);
  $dest_url = Url::fromRoute("dyniva_core.managed_entity.{$managedEntity->id()}.moderation_page", ['managed_entity' => $managedEntity->id(),'managed_entity_id' => $node->id()]);
  $dest_url->setOption('query', ['workspace_id' => $workspace_id]);
  $url_options = ['absolute' => TRUE, 'language' => $language,'html' => TRUE,'query' => ['destination' => $dest_url->toString(),'workspace_id' => $workspace_id]];
  $model_path = drupal_get_path('module', 'ccms_mail') .'/images/';
  $approve = Link::createFromRoute(SafeMarkup::format("<img class='block-center' src=\"/{$model_path}approve.png\" />", []), 'ccms.entity.node.moderation.approve', $url_params, $url_options);
  $reject = Link::createFromRoute(SafeMarkup::format("<img class='block-center' src=\"/{$model_path}reject.png\" />",[]), 'ccms.entity.node.moderation.reject', $url_params, $url_options);
  $btn_content = '<tr>
                    <td width="10%"></td>
                    <td width="30%" align="center">
                      ' . $approve->toString() . '
                    </td>
                    <td width="10%"></td>
                    <td width="30%" align="center">
                      ' . $reject->toString() . '
                    </td>
                    <td width="10%"></td>
                  </tr>
                  <tr>
                    <td>&nbsp;</td>
                    <td height="40"></td>
                    <td>&nbsp;</td>
                  </tr>';
  $output['approve_btn1'] = [
    '#theme' => 'ccms_mail_content_item',
    '#content' => $btn_content,
  ];

  return $renderer->render($output);
}
/**
 * Developer help function.
 */
function _dyniva_content_moderation_clean_field_config(){
  $properties = [
    'deleted' => TRUE,
    'include_deleted' => TRUE,
    'field_name' => 'moderation_transition'
  ];
  $fields = entity_load_multiple_by_properties('field_config', $properties);
  foreach($fields as $field){
    $field->delete();
    field_purge_field($field);
  }
}
